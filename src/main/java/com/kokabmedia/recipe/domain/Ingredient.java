package com.kokabmedia.recipe.domain;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;

import javax.persistence.*;
import java.math.BigDecimal;

/*
 * This class will handle the modelling of the database tables and also function as model for 
 * communication between the database and this application.
 * 
 * It will also act as a model class for values bounded to the HTML view file properties.
 * 
 * Getter and Setter methods and constructors of this class is provided with the Lombok framework. 
 * Getter setter methods and  constructors will be automatically generated by Lombok framework 
 * under the hood.
 */
@Getter
@Setter
/*
 * Generates hashCode and equals implementations from the fields of your object. When a class 
 * definition is annotated with @EqualsAndHashCode to let Lombok generate implementations of the 
 * equals(Object other) and hashCode() methods. 
 */
@EqualsAndHashCode(exclude = {"recipe"})
/* 
 * The @Entity annotation from javax.persistence enables the JPA framework to manage 
 * the Ingredient class as a JPA entity. The Ingredient class is an entity and will be  
 * mapped to a database table with the name Ingredient. 
 * 
 * The @Entity annotation will automatically with Hibernate, JPA and Spring auto 
 * configuration create a Ingredient table in the database.
 */
@Entity
public class Ingredient {


	/*
	 * The @Id annotation makes this field a primary key in the database table.
	 * 
	 * The @GeneratedValue annotation makes the Hibernate generate the primary key value.
	 * 
	 * The GenerationType.IDENTITY parameter indicates that the id will be generated by the
	 * database.
	 * 
	 * Primary key will uniquely identify each row in a database table.
	 */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String description;
    private BigDecimal amount;

    /*
  	 * Creates a OneToOne relationship mapping with the @OneToOne annotation, Ingredient can have
  	 * one UnitOfMeasure and one Ingredient can be associated with one UnitOfMeasure.
  	 * 
  	 * JPA and Hibernate will with the @OneToOne annotation on this field create a unit_of_measure_id 
  	 * column with a foreign key value in the Ingredient table. The unit_of_measure_id  column will 
  	 * link to a specific row in the UnitOfMeasure table. 
  	 * 
  	 * Ingredient and UnitOfMeasure have FetchType.Eager by default, The FetchType.EAGER changes the fetch
  	 * type to eager so when a Ingredient row is fetched UnitOfMeasure will also be fetched.
  	 * 
  	 * Ingredient has unidirectional association with UnitOfMeasure. OneToOne annotation makes it possible 
  	 * to navigate to the UnitOfMeasure.
  	 */
    @OneToOne(fetch = FetchType.EAGER)
    private UnitOfMeasure uom;

    /*
	 * This field is for relation mapping purposes, it will hold an Recipe object
	 * when it is mapped to it with the @OneToMany(mappedBy) annotation in the 
	 * Recipe class. The Ingredient table will have link to the Recipe table with a 
	 * recipe_id column containing foreign key value.
	 * 
	 * The @ManyToOne annotation indicates that Ingredient has a many to one relation 
	 * to Recipe. One Recipe can have many Ingredients. 
	 * 
	 * JPA and Hibernate will with the @ManyToOne annotation on this field create
	 * a recipe_id column in the Ingredient table. The Ingredient table is now owning the 
	 * relationship.
	 * 
	 * The recipe_id column will link to a specific row in Recipe table. Multiple 
	 * reviews objects (rows) can be linked to the same Recipe row with recipe_id
	 * column. This entity is the owning side of the relationship.
	 * 
	 * The fetch strategy for the ManyToOne side of the relations is Eager Fetch
	 * and the details of Recipe entity will be fetched with the Ingredient entity 
	 * automatically.
	 */
    @ManyToOne
    private Recipe recipe;

    public Ingredient() {
    }

    public Ingredient(String description, BigDecimal amount, UnitOfMeasure uom) {
        this.description = description;
        this.amount = amount;
        this.uom = uom;
    }

    public Ingredient(String description, BigDecimal amount, UnitOfMeasure uom, Recipe recipe) {
        this.description = description;
        this.amount = amount;
        this.uom = uom;
        this.recipe = recipe;
    }

}