package com.kokabmedia.recipe.commands;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/*
 * When we want to present the form to controllers we are going to use Command objects. Command objects
 * are used to transport data to and from forms. Spring will automatically bind data of form post. 
 * Binding is done with the form property names and the Command objects field names.
 * 
 * We could use domain (model) objects directly instead of using Command objects but, as the code 
 * of the application becomes more complex the requirements of our domain objects are going 
 * to be different than what you are exposing to our web tier, this is why we use Domain 
 * Objects and Converters.
 * 
 * Spring MVC will bind incoming form data properties (variables defined in the HTML/JSP file for the view )
 * to that command object.
 * 
 * We can pass data to the form to initialise the form with some initial data provided from Spring MVC. 
 * 
 * The HTTP POST request method will submit back data with the Command object from the form, as long as we 
 * make the form property names the same as the names of the field of the Command object Spring MVC will
 * handle the data binding for us and bring back the Command object with the data that was submitted in to
 * the the form automatically. The form properties will get bound to that Command object POJO.
 * 
 * Type conversion is done from the Command objects to the Entity objects.
 */

/*
 * This class will work as model for updating data for the view (web) and the controller classes 
 * (application). 
 * 
 * Getter and Setter methods and constructors of this class is provided with the Lombok framework. 
 * Getter setter methods and  constructors will be automatically generated by Lombok framework 
 * under the hood.
 */
@Getter
@Setter
@NoArgsConstructor
/*
 * We are going to bind data coming in from the form with POST request body, we will both receive and 
 * send data through these command objects, this will be done with Spring MVC if we make the form property
 * names the same as the object property names, then the framework will bind those properties of the form
 * to a bean for us. 
 * 
 * We will use the command object to render form input and output. 
 * 
 * Command objects are used to transport data to and from forms. 
 * 
 * The binding is done by the property name and the field name and not with getter and setter methods.
 * 
 * This comes in handy when updating data, that needs to be sent back and forth from the web to the application. 
 * This POJO is not Entity model beans.
 */
public class NotesCommand {
	
	 private Long id;
	 private String recipeNotes;

}
